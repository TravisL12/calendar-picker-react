{"version":3,"sources":["helpers.js","Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["buildDayArray","days","Array","keys","map","day","months","daysOfWeek","CalendarPicker","startDate","Date","id","useMemo","Math","round","random","dateProp","useState","getMonth","selectedMonth","setSelectedMonth","getFullYear","selectedYear","setSelectedYear","getDate","selectedDay","setSelectedDay","setDays","year","month","date","firstDay","getDay","prevMonthTotalDays","nextMonthTotalDays","totalDays","prettyName","toLocaleDateString","timeZone","createDate","setDate","useCallback","newDays","useEffect","changeMonth","change","isJanuary","isDecember","length","changeDate","event","target","name","value","daysBefore","slice","daysAfter","className","onClick","onChange","idx","type","step","dow","style","gridColumnStart","checked","htmlFor","App","height","Calendar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.695ee7f1.chunk.js","sourcesContent":["export const createDate = (year, month) => {\n  const date = new Date(year, month, 0); // 0-index month (0 - 11)\n  const firstDay = new Date(year, month).getDay(); // 0-index day of week (0 - 6)\n  const prevMonthTotalDays = new Date(year, month, 0).getDate();\n  const nextMonthTotalDays = new Date(year, month + 2, 0).getDate();\n  const totalDays = new Date(year, month + 1, 0).getDate();\n  const prettyName = date.toLocaleDateString(\"en-US\", {\n    timeZone: \"UTC\",\n    month: \"long\",\n  });\n\n  return {\n    firstDay,\n    totalDays,\n    prettyName,\n    prevMonthTotalDays,\n    nextMonthTotalDays,\n  };\n};\nexport const buildDayArray = (days) =>\n  [...Array(days).keys()].map((day) => day);\n\nexport const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\nexport const daysOfWeek = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"];\nexport const YEARS = \"years\";\nexport const MONTHS = \"months\";\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport {\n  createDate,\n  months,\n  daysOfWeek,\n  YEARS,\n  MONTHS,\n  buildDayArray,\n} from \"./helpers\";\n\nconst CalendarPicker = ({ startDate = new Date() }) => {\n  const id = useMemo(() => Math.round(Math.random() * 1000), []);\n  const dateProp = useMemo(() => {\n    if (typeof startDate === \"string\") {\n      return new Date(startDate);\n    }\n    return startDate;\n  }, [startDate]);\n\n  const [selectedMonth, setSelectedMonth] = useState(dateProp.getMonth());\n  const [selectedYear, setSelectedYear] = useState(dateProp.getFullYear());\n  const [selectedDay, setSelectedDay] = useState(dateProp.getDate());\n  const [days, setDays] = useState([]);\n  const { totalDays, firstDay, prevMonthTotalDays, nextMonthTotalDays } =\n    createDate(selectedYear, selectedMonth);\n\n  const setDate = useCallback(() => {\n    const newDays = buildDayArray(totalDays);\n    setDays(newDays);\n  }, [totalDays]);\n\n  useEffect(() => setDate(), [setDate, selectedMonth, selectedYear]);\n\n  const changeMonth = (change) => {\n    const isJanuary = selectedMonth === 0;\n    const isDecember = selectedMonth === months.length - 1;\n\n    if (isJanuary && change < 0) {\n      setSelectedYear(selectedYear - 1);\n      setSelectedMonth(months.length - 1);\n    } else if (isDecember && change > 0) {\n      setSelectedYear(selectedYear + 1);\n      setSelectedMonth((selectedMonth + change) % months.length);\n    } else {\n      setSelectedMonth((selectedMonth + change) % months.length);\n    }\n  };\n\n  const changeDate = (event) => {\n    const { name, value } = event.target;\n    if (name === \"months\") {\n      setSelectedMonth(+value);\n    }\n    if (name === \"years\") {\n      setSelectedYear(value);\n    }\n    setDate();\n  };\n\n  const daysBefore = buildDayArray(prevMonthTotalDays).slice(\n    prevMonthTotalDays - firstDay\n  );\n\n  const daysAfter =\n    totalDays + firstDay <= 35\n      ? 35 - (totalDays + firstDay)\n      : 42 - (totalDays + firstDay);\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"title\">\n        <button\n          className=\"month-btn\"\n          onClick={() => {\n            changeMonth(-1);\n          }}\n        >\n          &lt;\n        </button>\n        <select value={selectedMonth} name={MONTHS} onChange={changeDate}>\n          {months.map((month, idx) => (\n            <option key={month} value={idx}>\n              {month}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          value={selectedYear}\n          step=\"1\"\n          name={YEARS}\n          onChange={changeDate}\n        />\n        <button\n          className=\"month-btn\"\n          onClick={() => {\n            changeMonth(1);\n          }}\n        >\n          &gt;\n        </button>\n      </div>\n      <div className=\"dow-container\">\n        {daysOfWeek.map((dow) => (\n          <div key={dow} className=\"dow\">\n            {dow}\n          </div>\n        ))}\n      </div>\n      <div className=\"grid\">\n        {daysBefore.map((day) => (\n          <div className=\"day prev\">{day + 1}</div>\n        ))}\n        {days.map((day) => {\n          const style = day === 0 ? { gridColumnStart: firstDay + 1 } : {};\n          return (\n            <form key={`${id}-${day}`} style={style} className=\"day\">\n              <input\n                onChange={() => {\n                  setSelectedDay(day + 1);\n                }}\n                checked={selectedDay - 1 === day}\n                id={`${id}-${day}`}\n                type=\"radio\"\n                name=\"dates\"\n              />\n              <label htmlFor={`${id}-${day}`}>{day + 1}</label>\n            </form>\n          );\n        })}\n        {buildDayArray(nextMonthTotalDays)\n          .slice(0, daysAfter)\n          .map((day) => (\n            <div className=\"day prev\">{day + 1}</div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CalendarPicker;\n","import CalendarPicker from \"./Calendar\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div style={{ height: \"400px\" }}>\n        <CalendarPicker />\n      </div>\n      <div style={{ height: \"400px\" }}>\n        <CalendarPicker startDate={new Date(\"1980-7-4\")} />\n      </div>\n      <div style={{ height: \"400px\" }}>\n        <CalendarPicker startDate={\"2015-5-23\"} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}